version: '3.7'
services:

  # MySQL service
  zudio_mysqldb:
      container_name: "zudio_mysqldb"
      build: ./docker/mysql
      hostname: zudio_mysqldb
      tty: true
      ports:
          - '3308:3306'
      # Environment used to create the relevant DB and user
      environment:
          MYSQL_DATABASE: zudio
          MYSQL_USER: zudio
          MYSQL_PASSWORD: zudio
          MYSQL_ROOT_PASSWORD: zudio
      # Specifying a restart policy for the containerized service
      restart: always
      volumes:
          - ./log/mysql:/var/log/mysql
      networks:
          - zudio-network

  zudio_webapp:
    container_name: "zudio_webapp"
    build:
      context: .
    ports:
      - "5400:5400"
      - 443
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    command: dotnet run /app/zudio.api
    networks:
      - zudio-network
      #   depends_on:
    #     - neo

    # webapp:
    #   build:
    #     context: .
    #   container_name: "zudio_backend"
    #   ports:
    #     - 80
    #     - 443
    #   environment:
    #     - ASPNETCORE_ENVIRONMENT=Development
    #     - ASPNETCORE_URLS=http://+:80
    #   volumes:
    #     - ~/.aspnet/https:/https:ro
    #   command: 'dotnet run /app/zudio.graph.api/out --urls=http://0.0.0.0:5000'
    #   depends_on:
    #     - neo
    
    
    ## Defining the Neo4j Database Service        
    # neo:
    #     # The image to use
    #     image: neo4j:latest
    #     # map the ports so we can check the db server is up
    #     ports: 
    #         - 7474:7474
    #         - 7687:7687
    #     # mounting a named volume to the container to track db data
    #     volumes:
    #         - neo4j_data:/data/
    #     env_file:
    #         - .env.neo4j
    #     # networks:
    #     #     - zudio-network
        

## volumes to be generated, these are saved somewhere for repeated use by docker
# volumes:
#     neo4j_data:
networks:
  zudio-network:
    driver: bridge
